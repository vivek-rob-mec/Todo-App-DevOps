#SPDX-License-Identifier: MIT-0
# tasks file for ec2_launch
# roles/ec2_launch/tasks/main.yml
---

- name: Add security group for EC2 instance
  amazon.aws.ec2_group:
    name: "{{ sg_name }}"
    description: Security group for SSH and app access
    region: "{{ aws_region }}"
    rules: "{{ security_group_rules }}"
    rules_egress:
      - proto: all
        cidr_ip: 0.0.0.0/0
  register: security_group

- name: Getting info about existing instances
  amazon.aws.ec2_instance_info:
    region: "{{ aws_region }}"
    filters: 
      "tag:Name": "Ansible-created-instances-*"
      instance-state-name: ["running", "pending"]
  register: existing_instances

- name: Calculate number of instances to launch
  set_fact:
    instances_to_launch: "{{ ec2_instance_count|int - (existing_instances.instances | default([]) |length)}}"

- name: Debug number of instances to launch
  debug:
    msg: "{{instances_to_launch}}"

- name: Launch EC2 instance
  amazon.aws.ec2_instance:
    name: "Ansible-created-instances-{{(existing_instances.instances | default([])) |length + item}}"
    key_name: "{{ ec2_key_name }}"
    region: "{{ aws_region }}"
    instance_type: "{{ ec2_instance_type }}"
    image_id: "{{ ec2_ami_id }}"
    wait: yes
    network:
      assign_public_ip: true
    security_group: "{{ sg_name }}"
  register: new_ec2
  loop: "{{ range(1, instances_to_launch|int + 1)| list }}"
  when: instances_to_launch|int > 0

- name: Combine existing and new instances
  set_fact:
    all_instances: "{{(existing_instances.instances | default([])) + ( new_ec2.results|default([]) | map(attribute='instances')|flatten) }}"

- name: Debug EC2 launch result
  debug:
    var: new_ec2

- name: Waiting for instance to be ready
  wait_for:
    host: "{{ item.public_dns_name }}"
    port: 22
    delay: 30
    timeout: 300
    state: started
  loop: "{{ all_instances }}"

- name: Add the EC2 instances to the inventory dynamically
  add_host:
    name: "{{ item.public_dns_name }}"
    groups: launched_ec2_instance
    ansible_ssh_private_key_file: "{{ ec2_ssh_key_path }}"
    ansible_user: "{{ ec2_ssh_user }}"
    ansible_ssh_common_args: '-o StrictHostKeyChecking=no'
  loop: "{{ all_instances }}"

- name: Debug SSH Key Path
  debug:
    var: ec2_ssh_key_path

- name: Debug dynamic inventory
  debug:
    msg: "All Instances: {{ groups['launched_ec2_instance'] }}"
